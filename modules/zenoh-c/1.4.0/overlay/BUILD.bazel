# Copyright 2025 Open Source Robotics Foundation, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@rules_cc//cc:defs.bzl", "cc_test")
load("@rules_foreign_cc//foreign_cc:defs.bzl", "cmake")

package(default_visibility = ["//visibility:public"])

# The Zenoh builds makes several nested calls to "cargo" which are
# difficult to fix or change. To keep the build isolated, we will
# create a fake CARGO_HOME directory, and then pass the rustc and
# cargo tools as environment variables.
# -> TODO(asymingt) fix this properly through crates in rules_rust

CARGO_HOME = ".cargo_home/AUTO_GENERATED"

genrule(
    name = "cargo_home",
    outs = [CARGO_HOME],
    cmd = """
mkdir -p $$(dirname $(location :%s)) && touch $(location :%s)
""" % (CARGO_HOME, CARGO_HOME),
)

# Call rules_foreign_cc.cmake to perform a Zenoh build. Note the
# environment variables passed into the cmake calls provide the
# right tools and cache locations for the isolated build.

filegroup(
    name = "srcs",
    srcs = glob(["**"],
        exclude=[
            # These are auto-generated header files.
            "include/zenoh_commons.h",
            "include/zenoh_concrete.h",
            "include/zenoh_configure.h",
            "include/zenoh_macros.h",
            "include/zenoh_opaque.h",
            # These are auto-generated rust files.
            "src/opaque_types/mod.rs",
            # Bazel files
            "BUILD.bazel",
            "MODULE.bazel",
            "MODULE.bazel.lock"
        ]
    ),
)

cmake(
    name = "zenoh-c",
    cache_entries = {
        "ZENOHC_CARGO_FLAGS" : "--features=shared-memory zenoh/transport_serial",
        "ZENOHC_BUILD_WITH_UNSTABLE_API" : "TRUE",
    },
    lib_source = ":srcs",
    out_static_libs = ["libzenohc.a"],
    out_shared_libs = ["libzenohc.so"],
    out_include_dir = "include",
    env = {
        "CARGO": "$(execpath {})".format("@rules_rust//tools/upstream_wrapper:cargo"),
        "RUSTC": "$(execpath {})".format("@rules_rust//tools/upstream_wrapper:rustc"),
        "CARGO_HOME": "$${PWD}/bazel-bin/external/zenoh-c+/.cargo_home",
    },
    build_data = [
        "@rules_rust//tools/upstream_wrapper:rustc",
        "@rules_rust//tools/upstream_wrapper:cargo"
    ],
    linkopts = ["-lrt"],
    tags = ["requires-network"],
)


# Unit tests can be parallelized to maximize test throughput.

[
    cc_test(
        name = name,
        srcs = ["tests/" + name + ".c"],
        copts = ["-Wno-unused-variable", "-Wno-missing-braces"],
        deps = [":zenoh-c"],
        timeout = "short",
        tags = ["requires-network"],
    )
    for name in [
        "z_api_config_test",
        "z_api_constants",
        "z_api_double_drop_test",
        "z_api_drop_options",
        "z_api_encoding_test",
        "z_api_keyexpr_drop_test",
        "z_api_keyexpr_test",
        "z_api_liveliness",
        "z_api_null_drop_test",
        "z_api_payload_test",
        "z_api_session_test",
        "z_api_unitinialized_check",
    ]
]

# The build tests really only check for the preprocessor directive ZENOHC_DYN_LIB,
# and so -- even though we can control the linking -- the tests don't detect it.

cc_test(
    name = "z_build_static",
    srcs = ["tests/z_build_static.c"],
    copts = ["-Wno-unused-variable", "-Wno-missing-braces"],
    deps = [":zenoh-c"],
    linkstatic = True,
    timeout = "short",
    tags = ["requires-network", "exclusive"],
)


cc_test(
    name = "z_build_shared",
    srcs = ["tests/z_build_shared.c"],
    copts = ["-Wno-unused-variable", "-Wno-missing-braces"],
    deps = [":zenoh-c"],
    timeout = "short",
    linkstatic = False,
    local_defines = ["ZENOHC_DYN_LIB"],
    tags = ["requires-network", "exclusive"],
)

# Integration tests must be run exclusively to prevent destructive interference

[
    cc_test(
        name = name,
        srcs = ["tests/z_int_helpers.h", "tests/" + name + ".c"],
        copts = ["-Wno-unused-variable", "-Wno-missing-braces"],
        deps = [":zenoh-c"],
        timeout = "short",
        tags = ["requires-network", "exclusive"],
    )
    for name in [
        "z_int_helpers_test",
        "z_int_pub_sub_attachment_test",
        "z_int_pub_sub_test",
        "z_int_queryable_attachment_test",
        "z_int_queryable_test",
        "z_int_advanced_pub_sub_test",
        "z_int_pub_cache_query_sub_test",
    ]
]

# Leak test : z_leak_pub_sub_test (require valgrind)

cc_binary(
    name = "z_leak_pub_sub_test_impl",
    srcs = ["tests/z_leak_pub_sub_test.c"],
    copts = ["-Wno-unused-variable", "-Wno-missing-braces"],
    deps = [":zenoh-c"],
)

sh_test(
    name = "z_leak_pub_sub_test",
    srcs = ["tests/run_leak_check.sh"],
    args = ["$(location :z_leak_pub_sub_test_impl)"],
    data = [":z_leak_pub_sub_test_impl"],
    timeout = "short",
    tags = ["requires-network", "exclusive"],
)

# Leak test : z_leak_queryable_get_test (require valgrind)

cc_binary(
    name = "z_leak_queryable_get_test_impl",
    srcs = ["tests/z_leak_queryable_get_test.c"],
    copts = ["-Wno-unused-variable", "-Wno-missing-braces"],
    deps = [":zenoh-c"],
)

sh_test(
    name = "z_leak_queryable_get_test",
    srcs = ["tests/run_leak_check.sh"],
    args = ["$(location :z_leak_queryable_get_test_impl)"],
    data = [":z_leak_queryable_get_test_impl"],
    timeout = "short",
    tags = ["requires-network", "exclusive"],
)
