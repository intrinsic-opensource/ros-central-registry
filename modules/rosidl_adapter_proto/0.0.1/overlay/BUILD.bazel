# Copyright 2025 Open Source Robotics Foundation, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@rosdistro//bazel/python:macros.bzl", "py_pytest")
load("@rules_python//python:defs.bzl", "py_library", "py_binary")

package(default_visibility = ["//visibility:public"])

exports_files(glob(["*.bzl"]))

# These are the templates used for per-message header and source generation.
filegroup(
    name = "interface_templates",
    srcs = glob(["resource/*.em"]),
)

# Template used for per-package visibility header generation.
filegroup(
    name = "visibility_control_template",
    srcs = ["resource/rosidl_adapter_proto__visibility_control.h.in"],
)

# This is the python library that does the bulk of the work for converting
# the .msg, .srv, .action files to the generic .idl representation.
py_library(
    name = "rosidl_adapter_proto",
    srcs = glob(["rosidl_adapter_proto/**/*.py"]),
    data = glob(["resource/*.em"]),
    deps = [
        "@rosidl_pycommon",
    ],
)

# The py_binary target does not accept files without the .py or .py3 suffix.
# This rule simply renames the file to make it usable.
genrule(
    name = "cli_rename",
    srcs = ["bin/rosidl_adapter_proto"],
    outs = ["bin/rosidl_adapter_proto.py"],
    cmd = "cp $(location :bin/rosidl_adapter_proto) $(location :bin/rosidl_adapter_proto.py)",
)

# This makes the setup script executable, and ensures that eny downstream
# consumers of this script bring in the correct dependencies.
py_binary(
    name = "cli",
    srcs = [":bin/rosidl_adapter_proto.py"],
    main = ":bin/rosidl_adapter_proto.py",
    python_version = "PY3",
    deps = [":rosidl_adapter_proto"],
)

# All functional tests.

# TODO(fix) this one is hard because template_dir cannot be resolved at genrule
# time to be the resources location at test time.

# This replicates a call to the cmake function rosidl_write_generator_arguments
# which converts some cmake function call to a JSON file with arguments.
# genrule(
#     name = "generate_json",
#     srcs = [],
#     outs = ["test/msg/test_rosid_adapter_proto__arguments.json"],
#     cmd = """echo '{
#     "package_name": "rosidl_adapter_proto",
#     "idl_tuples": ["test:msg/BoolTest.idl"],
#     "output_dir": "test",
#     "template_dir": "rosidl_adapter_proto+/resource",
#     "target_dependencies": ["test/msg/BoolTest.idl"]
# }' > $(location :test/msg/test_rosid_adapter_proto__arguments.json)
# """,
#     tools = [
#         "resource",  # Add resource as a tool to make it available in the genrule's sandbox
#     ],
# )

# py_pytest(
#     name = "test_adapter_proto_message",
#     srcs = ["test/test_adapter_proto_message.py"],
#     python_version = "PY3",
#     data = glob(["resource/*.em"]) + glob(["test/msg/**"]) + [
#         "test/msg/test_rosid_adapter_proto__arguments.json"
#     ],
#     deps = [
#         "@rules_python//python/runfiles",
#         "@rosidl_parser",
#         ":rosidl_adapter_proto",
#     ],
# )

