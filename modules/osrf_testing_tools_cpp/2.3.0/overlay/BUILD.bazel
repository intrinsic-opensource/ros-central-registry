
# Copyright 2025 Open Source Robotics Foundation, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Imports

load("@rules_cc//cc:defs.bzl", "cc_library", "cc_test")
load("@rules_shell//shell:sh_test.bzl", "sh_test")

package(default_visibility = ["//visibility:public"])

# ROS C/C++ libraries

cc_library(
    name = "memory_tools",
    srcs = [
        "src/memory_tools/count_function_occurrences_in_backtrace.hpp",
        "src/memory_tools/custom_memory_functions.cpp",
        "src/memory_tools/custom_memory_functions.hpp",
        "src/memory_tools/dispatch_callback.hpp",
        "src/memory_tools/implementation_monitoring_override.cpp",
        "src/memory_tools/implementation_monitoring_override.hpp",
        "src/memory_tools/initialize.cpp",
        "src/memory_tools/is_working.cpp",
        "src/memory_tools/memory_tools_service_factory.hpp",
        "src/memory_tools/memory_tools_service_impl.hpp",
        "src/memory_tools/memory_tools_service.cpp",
        "src/memory_tools/memory_tools.cpp",
        "src/memory_tools/monitoring.cpp",
        "src/memory_tools/print_backtrace.hpp",
        "src/memory_tools/register_hooks.cpp",
        "src/memory_tools/safe_fwrite.hpp",
        "src/memory_tools/stack_trace_impl.hpp",
        "src/memory_tools/stack_trace.cpp",
        "src/memory_tools/test_count_function_in_backtrace.cpp",
        "src/memory_tools/test_lib.cpp",
        "src/memory_tools/testing_helpers.cpp",
        "src/memory_tools/vendor/bombela/backward-cpp/backward.cpp",
        "src/memory_tools/vendor/bombela/backward-cpp/backward.hpp",
        "src/memory_tools/verbosity.cpp",
    ],
    hdrs = glob(["include/**/*.hpp"]) + [
        "src/memory_tools/impl/apple.cpp",
        "src/memory_tools/impl/linux.cpp",
        "src/memory_tools/impl/static_allocator.hpp",
        "src/memory_tools/impl/unix_common.hpp",
        "src/memory_tools/impl/unix_common.cpp",
        "src/memory_tools/impl/unsupported_os.cpp",
    ],
    includes = [
        "include",
        "src",
    ],
)

cc_library(
    name = "memory_tools_interpose",
    srcs = [
        "src/memory_tools/memory_tools.cpp"
    ],
    includes = ["include"],

    deps = [
        ":memory_tools",
    ],
)

# Tests

cc_test(
    name = "test_memory_tools",
    srcs = ["test/memory_tools/test_memory_tools.cpp"],
    deps = [
        "@googletest//:gtest",
        "@googletest//:gtest_main",
        ":memory_tools",
    ],
)

cc_test(
    name = "test_parse_environment_variable",
    srcs = [
        "src/test_runner/parse_environment_variable.hpp",
        "test/test_runner/test_parse_environment_variable.cpp",
    ],
    deps = [
        "@googletest//:gtest",
        "@googletest//:gtest_main",
    ],
)

# Integration tests

cc_binary(
    name = "test_runner",
    srcs = glob([
        "src/test_runner/*.hpp",
        "src/test_runner/*.cpp",
    ]),
)

cc_binary(
    name = "assert_env_vars",
    srcs = [
        "src/test_runner/starts_with.hpp",
        "src/test_runner/parse_environment_variable.hpp",
        "src/test_runner/get_environment_variable.hpp",
        "test/test_runner/assert_env_vars.cpp",
    ],
    deps = [
        "@googletest//:gtest",
    ],
)

# Use genrule to create the shell script from a multi-line string.
genrule(
    name = "generate_script",
    tools = [
        ":test_runner",
        ":assert_env_vars",
    ],
    outs = ["autogenerated_script.sh"],
    cmd = """echo '#!/bin/bash
set -euo pipefail
$${TEST_SRCDIR}/osrf_testing_tools_cpp+/test_runner --env FOO=bar PING=pong --append-env FOO=baz -- \
$${TEST_SRCDIR}/osrf_testing_tools_cpp+/assert_env_vars --env FOO=bar:baz PING=pong' > $(location :autogenerated_script.sh)
""",
)

sh_test(
    name = "test_test_runner",
    srcs = [":autogenerated_script.sh"],
    data = [
        ":test_runner",
        ":assert_env_vars",
    ],
    size = "small"
)