diff --git a/ament_index_python/ament_index_python/search_paths.py b/ament_index_python/ament_index_python/search_paths.py
index 80982a3..fcdb5ac 100644
--- a/ament_index_python/ament_index_python/search_paths.py
+++ b/ament_index_python/ament_index_python/search_paths.py
@@ -13,11 +13,11 @@
 # limitations under the License.
 
 import os
+from pathlib import Path
 from typing import List
 
 from .constants import AMENT_PREFIX_PATH_ENV_VAR
 
-
 def get_search_paths() -> List[str]:
     """
     Get the paths from the environment variable '{AMENT_PREFIX_PATH_ENV_VAR}'.
@@ -25,8 +25,20 @@ def get_search_paths() -> List[str]:
     :returns: list of paths
     :raises: :exc:`EnvironmentError`
     """.format(AMENT_PREFIX_PATH_ENV_VAR=AMENT_PREFIX_PATH_ENV_VAR)
+
+    # In a Bazel context AMENT_PREFIX_PATH should not be set. If this is the case, then
+    # we need to poke for a MANIFEST file, and use the current work directory as a
+    # stand-in search path for package data.
     ament_prefix_path = os.environ.get(AMENT_PREFIX_PATH_ENV_VAR)
     if not ament_prefix_path:
+        runfiles_dir = os.environ.get("RUNFILES_DIR")
+        test_workspace = os.environ.get("TEST_WORKSPACE")
+        if runfiles_dir and test_workspace:
+            return [os.path.join(runfiles_dir, test_workspace)]
+        p1 = Path.cwd()
+        p2 = Path("../MANIFEST")
+        if (p1 / p2).is_file():
+            return [p1]
         raise EnvironmentError(
             "Environment variable '{}' is not set or empty".format(AMENT_PREFIX_PATH_ENV_VAR))
 