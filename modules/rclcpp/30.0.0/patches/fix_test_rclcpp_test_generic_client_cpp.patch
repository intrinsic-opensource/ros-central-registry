diff --git a/rclcpp/test/rclcpp/test_generic_client.cpp b/rclcpp/test/rclcpp/test_generic_client.cpp
index 5a1aed09..1c3892dc 100644
--- a/rclcpp/test/rclcpp/test_generic_client.cpp
+++ b/rclcpp/test/rclcpp/test_generic_client.cpp
@@ -92,6 +92,8 @@ protected:
 /*
    Testing client construction and destruction.
  */
+// TODO(asymingt) fix generic clients (dynamic type loading) and mocking.
+// See: https://github.com/intrinsic-opensource/ros-central-registry/issues/66
 TEST_F(TestGenericClient, construction_and_destruction) {
   {
     auto client = node->create_generic_client("test_service", "test_msgs/srv/Empty");
@@ -112,6 +114,8 @@ TEST_F(TestGenericClient, construction_and_destruction) {
   }
 }
 
+// TODO(asymingt) fix generic clients (dynamic type loading) and mocking.
+// See: https://github.com/intrinsic-opensource/ros-central-registry/issues/66
 TEST_F(TestGenericClient, construction_with_free_function) {
   {
     auto client = rclcpp::create_generic_client(
@@ -181,6 +185,8 @@ TEST_F(TestGenericClient, construction_with_free_function) {
   }
 }
 
+// TODO(asymingt) fix generic clients (dynamic type loading) and mocking.
+// See: https://github.com/intrinsic-opensource/ros-central-registry/issues/66
 TEST_F(TestGenericClient, construct_with_rcl_error) {
   {
     // reset() is not necessary for this exception, but handles unused return value warning
@@ -197,6 +203,8 @@ TEST_F(TestGenericClient, construct_with_rcl_error) {
   }
 }
 
+// TODO(asymingt) fix generic clients (dynamic type loading) and mocking.
+// See: https://github.com/intrinsic-opensource/ros-central-registry/issues/66
 TEST_F(TestGenericClient, wait_for_service) {
   const std::string service_name = "test_service";
 
@@ -218,6 +226,8 @@ TEST_F(TestGenericClient, wait_for_service) {
 /*
    Testing generic client construction and destruction for subnodes.
  */
+// TODO(asymingt) fix generic clients (dynamic type loading) and mocking.
+// See: https://github.com/intrinsic-opensource/ros-central-registry/issues/66
 TEST_F(TestGenericClientSub, construction_and_destruction) {
   {
     auto client = subnode->create_generic_client("test_service", "test_msgs/srv/Empty");
@@ -232,6 +242,8 @@ TEST_F(TestGenericClientSub, construction_and_destruction) {
   }
 }
 
+// TODO(asymingt) fix generic clients (dynamic type loading) and mocking.
+// See: https://github.com/intrinsic-opensource/ros-central-registry/issues/66
 TEST_F(TestGenericClientSub, async_send_request_with_request) {
   const std::string service_name = "test_service";
   int64_t expected_change = 1111;
@@ -263,6 +275,8 @@ TEST_F(TestGenericClientSub, async_send_request_with_request) {
   EXPECT_EQ(typed_response->int64_value, (request.int64_value + expected_change));
 }
 
+// TODO(asymingt) fix generic clients (dynamic type loading) and mocking.
+// See: https://github.com/intrinsic-opensource/ros-central-registry/issues/66
 TEST_F(TestGenericClientSub, async_send_request_with_request_and_callback) {
   const std::string service_name = "test_service";
   int64_t expected_change = 2222;