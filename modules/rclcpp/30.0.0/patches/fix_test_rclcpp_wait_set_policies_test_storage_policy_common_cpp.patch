diff --git a/rclcpp/test/rclcpp/wait_set_policies/test_storage_policy_common.cpp b/rclcpp/test/rclcpp/wait_set_policies/test_storage_policy_common.cpp
index 8de89017..ca1e7c9e 100644
--- a/rclcpp/test/rclcpp/wait_set_policies/test_storage_policy_common.cpp
+++ b/rclcpp/test/rclcpp/wait_set_policies/test_storage_policy_common.cpp
@@ -82,14 +82,16 @@ private:
   bool add_to_wait_set_;
 };
 
-TEST_F(TestStoragePolicyCommon, rcl_wait_set_fini_error) {
+// TODO(asymingt) enable once mocking works in Bazel.
+TEST_F(TestStoragePolicyCommon, DISABLED_rcl_wait_set_fini_error) {
   auto wait_set = std::make_shared<rclcpp::WaitSet>();
   auto mock = mocking_utils::inject_on_return(
     "lib:rclcpp", rcl_wait_set_fini, RCL_RET_ERROR);
   EXPECT_NO_THROW(wait_set.reset());
 }
 
-TEST_F(TestStoragePolicyCommon, rcl_wait_set_resize_error) {
+// TODO(asymingt) enable once mocking works in Bazel.
+TEST_F(TestStoragePolicyCommon, DISABLED_rcl_wait_set_resize_error) {
   rclcpp::WaitSet wait_set;
 
   auto subscription = node->create_subscription<test_msgs::msg::Empty>(
@@ -104,7 +106,8 @@ TEST_F(TestStoragePolicyCommon, rcl_wait_set_resize_error) {
     rclcpp::exceptions::RCLError);
 }
 
-TEST_F(TestStoragePolicyCommon, rcl_wait_set_clear_error) {
+// TODO(asymingt) enable once mocking works in Bazel.
+TEST_F(TestStoragePolicyCommon, DISABLED_rcl_wait_set_clear_error) {
   rclcpp::WaitSet wait_set;
 
   auto mock = mocking_utils::patch_and_return(
@@ -114,7 +117,8 @@ TEST_F(TestStoragePolicyCommon, rcl_wait_set_clear_error) {
     rclcpp::exceptions::RCLError);
 }
 
-TEST_F(TestStoragePolicyCommon, rcl_wait_set_add_subscription_error) {
+// TODO(asymingt) enable once mocking works in Bazel.
+TEST_F(TestStoragePolicyCommon, DISABLED_rcl_wait_set_add_subscription_error) {
   rclcpp::WaitSet wait_set;
   auto subscription = node->create_subscription<test_msgs::msg::Empty>(
     "topic", 10, [](test_msgs::msg::Empty::ConstSharedPtr) {});
@@ -127,7 +131,9 @@ TEST_F(TestStoragePolicyCommon, rcl_wait_set_add_subscription_error) {
     wait_set.wait(),
     rclcpp::exceptions::RCLError);
 }
-TEST_F(TestStoragePolicyCommon, rcl_wait_set_add_guard_condition_error) {
+
+// TODO(asymingt) enable once mocking works in Bazel.
+TEST_F(TestStoragePolicyCommon, DISABLED_rcl_wait_set_add_guard_condition_error) {
   rclcpp::WaitSet wait_set;
   auto guard_condition = std::make_shared<rclcpp::GuardCondition>();
   auto mock = mocking_utils::patch_and_return(
@@ -138,7 +144,8 @@ TEST_F(TestStoragePolicyCommon, rcl_wait_set_add_guard_condition_error) {
     rclcpp::exceptions::RCLError);
 }
 
-TEST_F(TestStoragePolicyCommon, rcl_wait_set_add_timer_error) {
+// TODO(asymingt) enable once mocking works in Bazel.
+TEST_F(TestStoragePolicyCommon, DISABLED_rcl_wait_set_add_timer_error) {
   rclcpp::WaitSet wait_set;
   auto timer = node->create_wall_timer(std::chrono::seconds(100), []() {});
   auto mock = mocking_utils::patch_and_return(
@@ -149,7 +156,8 @@ TEST_F(TestStoragePolicyCommon, rcl_wait_set_add_timer_error) {
     rclcpp::exceptions::RCLError);
 }
 
-TEST_F(TestStoragePolicyCommon, rcl_wait_set_add_service_error) {
+// TODO(asymingt) enable once mocking works in Bazel.
+TEST_F(TestStoragePolicyCommon, DISABLED_rcl_wait_set_add_service_error) {
   rclcpp::WaitSet wait_set;
   auto service =
     node->create_service<test_msgs::srv::Empty>(
@@ -165,7 +173,8 @@ TEST_F(TestStoragePolicyCommon, rcl_wait_set_add_service_error) {
     rclcpp::exceptions::RCLError);
 }
 
-TEST_F(TestStoragePolicyCommon, rcl_wait_set_add_client_error) {
+// TODO(asymingt) enable once mocking works in Bazel.
+TEST_F(TestStoragePolicyCommon, DISABLED_rcl_wait_set_add_client_error) {
   rclcpp::WaitSet wait_set;
   auto client = node->create_client<test_msgs::srv::Empty>("service");
   auto mock = mocking_utils::patch_and_return(