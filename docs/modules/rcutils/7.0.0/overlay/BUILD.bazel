
# Copyright 2025 Open Source Robotics Foundation, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Imports

load("@rules_cc//cc:defs.bzl", "cc_binary", "cc_library", "cc_test")

package(default_visibility = ["//visibility:public"])

# Library

cc_library(
    name = "rcutils",
    srcs = glob(["src/**/*.h", "src/**/*.c"], exclude = ["src/time_win32.c"]),
    hdrs = glob(["include/**/*.h"]),
    includes = ["include"],
    local_defines = [
        "RCUTILS_ENABLE_FAULT_INJECTION",
        "ROS_PACKAGE_NAME=\\\"rcutils\\\"",
        "_GNU_SOURCE",  # Required to get 'program_invocation_name'
    ],
)

# Test

cc_library(
    name = "rcutils_mock",
    srcs = [":rcutils"],
    hdrs = glob(["include/**/*.h"]),
    includes = ["include"],
    local_defines = [
        "RCUTILS_ENABLE_FAULT_INJECTION",
        "ROS_PACKAGE_NAME=\\\"rcutils\\\"",
        "_GNU_SOURCE",  # Required to get 'program_invocation_name'
    ],
)

genrule(
    name = "file_with_space",
    outs = ["test/file with space.txt"],
    cmd = "echo '' > \"$(OUTS)\"",
)

[
    cc_test(
        name = name,
        srcs = glob(["test/**/*.h", "test/**/*.hpp"]) + ["test/{}".format(src)],
        local_defines = [
            "ROS_PACKAGE_NAME=\\\"rcutils\\\"",
            "BUILD_DIR=\\\"/tmp\\\"",
        ],
        data = glob([
            "test/dummy_folder/**",
            "test/dummy_folder_with_subdir/**",
            "test/dummy_shared_library/**",
            "test/dummy_*.txt",
        ]) + [":file_with_space"],
        deps = [
            "@googletest//:gtest_main",
            "@googletest//:gtest",
            "@osrf_testing_tools_cpp//:memory_tools",
            "@mimick",
            "@test_msgs//:msgs_c",
            "@rules_cc//cc/runfiles",
            ":rcutils_mock",
        ],
        env = env,
    )
    for (name, src), env in {
        ("test_logging", "test_logging.cpp") : {},
        ("test_logging_long_messages", "test_logging_long_messages.cpp")  : {},
        ("test_logging_macros", "test_logging_macros.cpp") : {},
        ("test_allocator", "test_allocator.cpp") : {},
        ("test_char_array", "test_char_array.cpp") : {},
        ("test_error_handling", "test_error_handling.cpp") : {},
        ("test_error_handling_helpers", "test_error_handling_helpers.cpp") : {},
        ("test_split", "test_split.cpp") : {},
        ("test_join", "test_join.cpp") : {},
        ("test_find", "test_find.cpp") : {},
        ("test_string_array", "test_string_array.cpp") : {},
        ("test_env", "test_env.cpp") : {
            "EMPTY_TEST": "",
            "NORMAL_TEST": "foo",
            "HOME": ".",
        },
        ("test_filesystem", "test_filesystem.cpp") : {
            "HOME": ".",
        },
        ("test_strdup", "test_strdup.cpp") : {},
        ("test_format_string", "test_format_string.cpp") : {},
        ("test_string_map", "test_string_map.cpp") : {},
        ("test_isalnum_no_locale", "test_isalnum_no_locale.cpp") : {},
        ("test_repl_str", "test_repl_str.cpp") : {},
        ("test_sha256", "test_sha256.cpp") : {},
        ("test_time", "test_time.cpp") : {},
        ("test_snprintf", "test_snprintf.cpp") : {},
        ("test_strcasecmp", "test_strcasecmp.cpp") : {},
        ("test_uint8_array", "test_uint8_array.cpp") : {},
        ("test_array_list", "test_array_list.cpp") : {},
        ("test_hash_map", "test_hash_map.cpp") : {},
        ("test_cmdline_parser", "test_cmdline_parser.cpp") : {},
        ("test_process", "test_process.cpp") : {},
        ("test_logging_custom_env", "test_logging_custom_env.cpp") : {
            "RCUTILS_CONSOLE_OUTPUT_FORMAT" :
                "[{severity}] [{time},{time_as_nanoseconds}] [{name},{function_name},{file_name}]: {line_number}-{message}",
            "RCUTILS_CONSOLE_STDOUT_LINE_BUFFERED" : "1",
            "RCUTILS_LOGGING_BUFFERED_STREAM" : "1",
            "RCUTILS_LOGGING_USE_STDOUT" : "1",
            "RCUTILS_COLORIZED_OUTPUT" : "1",
        },
        ("test_logging_custom_env2", "test_logging_custom_env.cpp") : {
            "RCUTILS_CONSOLE_OUTPUT_FORMAT" : " ".join(
                [
                    "[{severity}] [{time},{time_as_nanoseconds}] [{name},{function_name},{file_name}]: {line_number}-{message}"
                        for _ in range(100)
                ]
            ),
            "RCUTILS_CONSOLE_STDOUT_LINE_BUFFERED" : "0",
            "RCUTILS_LOGGING_BUFFERED_STREAM" : "0",
            "RCUTILS_LOGGING_USE_STDOUT" : "0",
            "RCUTILS_COLORIZED_OUTPUT" : "0",
        },
        ("test_logging_bad_env", "test_logging_bad_env.cpp") : {
            "RCUTILS_LOGGING_USE_STDOUT" : "42",
        },
        ("test_logging_bad_env2", "test_logging_bad_env.cpp") : {
            "RCUTILS_COLORIZED_OUTPUT" : "42",
        },
        ("test_logging_bad_env3", "test_logging_bad_env.cpp") : {
            "RCUTILS_LOGGING_BUFFERED_STREAM" : "42",
        },
        ("test_logging_enable_for", "test_logging_enable_for.cpp") : {},
        ("test_logging_console_output_handler", "test_logging_console_output_handler.cpp") : {},
        ("test_macros", "test_macros.cpp") : {},
        ("test_logging_macros_c", "test_logging_macros.c") : {},
        ("test_atomics_executable", "test_atomics.c") : {},
    }.items()
]

[
    cc_test(
        name = test,
        srcs = glob(["test/**/*.h"]) + ["test/benchmark/" + test + ".cpp"],
        local_defines = ["ROS_PACKAGE_NAME=\\\"rcl_yaml_param_parser\\\""],
        deps = [
            "@google_benchmark//:benchmark_main",
            "@google_benchmark//:benchmark",
            "@osrf_testing_tools_cpp//:memory_tools",
            ":rcutils",
        ],
        timeout = "moderate",
    )
    for test in [
        "benchmark_error_handling",
        "benchmark_logging",
    ]
]
