
# Copyright 2025 Open Source Robotics Foundation, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@rosidl_generator_c//:rules.bzl", "c_ros_library")
load("@rosidl_generator_cpp//:rules.bzl", "cc_ros_library")
load("@rules_cc//cc:defs.bzl", "cc_library", "cc_test")

package(default_visibility = ["//visibility:public"])

c_ros_library(
    name = "msgs",
    deps = [
        "@rcl_interfaces//msg:FloatingPointRange",
        "@rcl_interfaces//msg:IntegerRange",
        "@rcl_interfaces//msg:ListParametersResult",
        "@rcl_interfaces//msg:Log",
        "@rcl_interfaces//msg:LoggerLevel",
        "@rcl_interfaces//msg:Parameter",
        "@rcl_interfaces//msg:ParameterDescriptor",
        "@rcl_interfaces//msg:ParameterEvent",
        "@rcl_interfaces//msg:ParameterEventDescriptors",
        "@rcl_interfaces//msg:ParameterType",
        "@rcl_interfaces//msg:ParameterValue",
        "@rcl_interfaces//msg:SetLoggerLevelsResult",
        "@rcl_interfaces//msg:SetParametersResult",
        "@rcl_interfaces//srv:DescribeParameters",
        "@rcl_interfaces//srv:GetLoggerLevels",
        "@rcl_interfaces//srv:GetParameterTypes",
        "@rcl_interfaces//srv:GetParameters",
        "@rcl_interfaces//srv:ListParameters",
        "@rcl_interfaces//srv:SetLoggerLevels",
        "@rcl_interfaces//srv:SetParameters",
        "@rcl_interfaces//srv:SetParametersAtomically",
        "@type_description_interfaces//msg:Field",
        "@type_description_interfaces//msg:FieldType",
        "@type_description_interfaces//msg:IndividualTypeDescription",
        "@type_description_interfaces//msg:KeyValue",
        "@type_description_interfaces//msg:TypeDescription",
        "@type_description_interfaces//msg:TypeSource",
        "@type_description_interfaces//srv:GetTypeDescription",
    ],
)

cc_library(
    name = "rcl",
    srcs = glob(["src/**/*.c", "src/**/*.h"]),
    hdrs = glob(["include/**/*.h"]),
    includes = ["include", "src"],
    local_defines = ["ROS_PACKAGE_NAME=\\\"rcl\\\""],
    copts = ["-Wno-deprecated-pragma"],
    deps = [
        "@rcl_logging_interface",
        "@rcl_logging_spdlog",
        "@rcl_yaml_param_parser",
        "@rcutils",
        "@rmw_implementation",
        "@rosidl_runtime_cpp",
        "@tracetools",
        ":msgs",
    ],
)

# Tests

cc_ros_library(
    name = "test_msgs",
    deps = [
        "@test_msgs//msg:Arrays",
    ],
)

cc_library(
    name = "wait_for_entity_helpers",
    srcs = ["test/rcl/wait_for_entity_helpers.cpp"],
    hdrs = ["test/rcl/wait_for_entity_helpers.hpp"],
    includes = ["test"],
    local_defines = ["ROS_PACKAGE_NAME=\\\"rcl\\\""],
    deps = [
        "@osrf_testing_tools_cpp//:memory_tools",
        ":rcl",
    ]
)

[
    cc_test(
        name = test,
        srcs = [
            "test/rcl/{}.cpp".format(test)
        ] + glob([
            "src/rcl/**/*.h",
            "test/rcl/**/*.h",
            "test/rcl/**/*.hpp",
            "test/mocking_utils/*.hpp",
        ]),
        local_defines = [
            "ROS_PACKAGE_NAME=\\\"rcl\\\"",
            "RMW_TIMESTAMPS_SUPPORTED=1",
        ],
        includes = ["src/rcl"],
        data = glob(["test/resources/**"]),
        deps = [
            "@googletest//:gtest_main",
            "@googletest//:gtest",
            "@osrf_testing_tools_cpp//:memory_tools",
            "@mimick",
            "@rules_cc//cc/runfiles",
            "@test_msgs//:msgs_c",
            ":rcl",
            ":wait_for_entity_helpers",
            ":test_msgs",
        ],
        timeout = "moderate",
    )
    for test in [
        "test_arguments",
        "test_client",
        "test_common",
        "test_context",
        "test_count_matched",
        "test_discovery_options",
        "test_domain_id",
        "test_events",
        "test_expand_topic_name",
        "test_get_actual_qos",
        "test_get_node_names",
        "test_get_type_description_service",
        "test_graph",
        "test_guard_condition",
        "test_info_by_topic",
        "test_init",
        "test_lexer",
        "test_lexer_lookahead",
        "test_log_level",
        "test_logging",
        "test_logging_rosout",
        "test_namespace",
        "test_network_flow_endpoints",
        "test_node",
        "test_node_type_cache",
        "test_publisher",
        "test_publisher_wait_all_ack",
        "test_remap",
        "test_remap_integration",
        "test_rmw_impl_id_check_exe",
        "test_rmw_impl_id_check_func",
        "test_security",
        "test_service",
        "test_service_event_publisher",
        "test_subscription",
        "test_subscription_content_filter_options",
        "test_time",
        "test_timer",
        "test_type_description_conversions",
        "test_type_hash",
        "test_validate_enclave_name",
        "test_validate_topic_name",
        "test_wait",
    ]
]
