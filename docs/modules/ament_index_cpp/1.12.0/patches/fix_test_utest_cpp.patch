diff --git a/ament_index_cpp/test/utest.cpp b/ament_index_cpp/test/utest.cpp
index 33baa14..26d6633 100644
--- a/ament_index_cpp/test/utest.cpp
+++ b/ament_index_cpp/test/utest.cpp
@@ -29,14 +29,21 @@
 #include "ament_index_cpp/get_search_paths.hpp"
 #include "ament_index_cpp/has_resource.hpp"
 
+#include "rules_cc/cc/runfiles/runfiles.h"
+
+using rules_cc::cc::runfiles::Runfiles;
+
 std::string generate_subfolder_path(std::string subfolder)
 {
-  // Get base path of this file
-  std::string base_path = __FILE__;
-  const std::string filename = "utest.cpp";
-  base_path = base_path.substr(0, base_path.length() - filename.length() - 1);
-  // Generate the base path of the subfolder in this directory
-  return base_path + "/" + subfolder;
+  std::string error;
+  auto runfiles = std::unique_ptr<Runfiles>(Runfiles::CreateForTest(&error));
+  if (!runfiles) {
+    std::string base_path = __FILE__;
+    const std::string filename = "utest.cpp";
+    base_path = base_path.substr(0, base_path.length() - filename.length() - 1);
+    return base_path + "/" + subfolder;
+  }
+  return runfiles->Rlocation("ament_index_cpp+/test/" + subfolder);
 }
 
 void set_ament_prefix_path(std::list<std::string> subfolders)
@@ -66,7 +73,9 @@ void set_ament_prefix_path(std::list<std::string> subfolders)
   }
 }
 
-TEST(AmentIndexCpp, empty_search_paths) {
+// NOTE: This test is disabled because AMENT_PREFIX_PATH is always set for a Bazel
+// environment to be the .runfile location for the current executable.
+TEST(AmentIndexCpp, DISABLED_empty_search_paths) {
   std::list<std::string> subfolders;
   set_ament_prefix_path(subfolders);
   EXPECT_THROW(ament_index_cpp::get_search_paths(), std::runtime_error);