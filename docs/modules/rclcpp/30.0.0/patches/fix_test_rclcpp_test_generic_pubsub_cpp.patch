diff --git a/rclcpp/test/rclcpp/test_generic_pubsub.cpp b/rclcpp/test/rclcpp/test_generic_pubsub.cpp
index 46dd397c..4e54fccd 100644
--- a/rclcpp/test/rclcpp/test_generic_pubsub.cpp
+++ b/rclcpp/test/rclcpp/test_generic_pubsub.cpp
@@ -142,8 +142,9 @@ private:
   }
 };
 
-
-TEST_F(RclcppGenericNodeFixture, publisher_and_subscriber_work)
+// TODO(asymingt) fix generic clients (dynamic type loading) and mocking.
+// See: https://github.com/intrinsic-opensource/ros-central-registry/issues/66
+TEST_F(RclcppGenericNodeFixture, DISABLED_publisher_and_subscriber_work)
 {
   // We currently publish more messages because they can get lost
   std::vector<std::string> test_messages = {"Hello World", "Hello World"};
@@ -180,7 +181,9 @@ TEST_F(RclcppGenericNodeFixture, publisher_and_subscriber_work)
   EXPECT_THAT(subscribed_messages[0], StrEq("Hello World"));
 }
 
-TEST_F(RclcppGenericNodeFixture, publish_loaned_msg_work)
+// TODO(asymingt) fix generic clients (dynamic type loading) and mocking.
+// See: https://github.com/intrinsic-opensource/ros-central-registry/issues/66
+TEST_F(RclcppGenericNodeFixture, DISABLED_publish_loaned_msg_work)
 {
   // We currently publish more messages because they can get lost
   std::vector<int64_t> test_messages = {100, 100};
@@ -225,7 +228,9 @@ TEST_F(RclcppGenericNodeFixture, publish_loaned_msg_work)
   }
 }
 
-TEST_F(RclcppGenericNodeFixture, generic_subscription_uses_qos)
+// TODO(asymingt) fix generic clients (dynamic type loading) and mocking.
+// See: https://github.com/intrinsic-opensource/ros-central-registry/issues/66
+TEST_F(RclcppGenericNodeFixture, DISABLED_generic_subscription_uses_qos)
 {
   // If the GenericSubscription does not use the provided QoS profile,
   // its request will be incompatible with the Publisher's offer and no messages will be passed.
@@ -245,7 +250,9 @@ TEST_F(RclcppGenericNodeFixture, generic_subscription_uses_qos)
   ASSERT_TRUE(wait_for(connected, 5s));
 }
 
-TEST_F(RclcppGenericNodeFixture, generic_publisher_uses_qos)
+// TODO(asymingt) fix generic clients (dynamic type loading) and mocking.
+// See: https://github.com/intrinsic-opensource/ros-central-registry/issues/66
+TEST_F(RclcppGenericNodeFixture, DISABLED_generic_publisher_uses_qos)
 {
   // If the GenericPublisher does not use the provided QoS profile,
   // its offer will be incompatible with the Subscription's request and no messages will be passed.
@@ -265,7 +272,9 @@ TEST_F(RclcppGenericNodeFixture, generic_publisher_uses_qos)
   ASSERT_TRUE(wait_for(connected, 5s));
 }
 
-TEST_F(RclcppGenericNodeFixture, generic_subscription_different_callbacks)
+// TODO(asymingt) fix generic clients (dynamic type loading) and mocking.
+// See: https://github.com/intrinsic-opensource/ros-central-registry/issues/66
+TEST_F(RclcppGenericNodeFixture, DISABLED_generic_subscription_different_callbacks)
 {
   using namespace std::chrono_literals;
   std::string topic_name = "string_topic";